#+Title: Projeto: Tradução de artigo para Racket

#+Author: Paula Daco e Rafael Mesquita

* Introdução

Neste projeto, vamos implementar em Racket três pseudocódigos do /essay/ "Algorithm Design Techniques" da coluna "Programming Pearls" da revista da Association for Computing Machinery, escrito pelo cientista da computação Jon Bentley, em 1984. 

A coletânea dos textos da "Programming Pearls" é um clássico da commputação, citado por quase 300 papers da área, mas "Algorithm Design Techniques" merece um destaque especial, pois apresenta a discussão sobre complexidade computacional, algoritmos e técnicas de design de algoritmos de forma acessível e a exemplifica através de um problema específico. 

Pensar complexidade e algoritmos é fundamental, permitindo que, com a técnica correta, lide-se com problemas até então considerados intratáveis. 

* O problema do subvetor máximo e implementação do primeiro algoritmo

O problema envolve calcular, dada uma lista, a maior soma em uma sequência de elementos dessa lista. Podemos pensar a lista enquanto um vetor e, assim, queremos identificar o subvetor que contenha a maior soma possível. Os elementos do vetor fazem parte do conjunto de númerosreais, já que, se o vetor fosse composto apenas por números positivos ou números negativos, a solução seria, necessariamente, o próprio vetor (se o vetor for positivo) ou 0 (se o vetor for negativo). 

O primeiro algoritmo que implementamos possui ordem cúbica de grandeza (O(N³)). Percebe-se que a essência deste algoritmo é utilizar =for= dentro de =for=, ocasionando assim, várias recursões durante o processo. Para começar, tivemos de implementar uma função que chamamos de =X=. Esta, por sua vez, é responsável por fazer a soma dos elementos no intervalo especificado. Para conseguirmos especificar o intervalo, criamos dois ponteiros: um que aponta para o início do intervalo e outro que aponta para o final.

*Algoritmo O(N³)*
#+BEGIN_SRC scheme
 (define (X lista ptr1 ptr2)
   (define (aux-X lista ptr1 ptr2 counter)
     (if (equal? ptr1 ptr2)
         counter
         (aux-X lista ptr1 (- ptr2 1) (+ counter (list-ref lista (- ptr2 1))))))
   (aux-X lista ptr1 ptr2 (list-ref lista (- ptr1 1))))
   

 (define (MaxSoFar-aux lst)
   (let ((p empty))
   (if (null? lst)
       empty
       (for/list ((i (+ (length lst) 1))
                  #:when (> i 0))
         (for/list ((j (range i (+ (length lst) 1))))
          (begin (set! p (X lst i j))
                 p))))))
                 

 (define (multi-max lst)
   (cond ((pair? lst) (max (multi-max (car lst)) (multi-max (cdr lst))))
         ((number? lst) lst)
         (else 0)))
         
         
 (define (MaxSoFar-1 lst)
   (multi-max (MaxSoFar-aux lst)))
#+END_SRC

A função principal, ou seja, a função que retorna o subvetor de maior soma é a =MaxSoFar=. Ela depende da função =MaxSoFar-aux= e da =multi-max=. A primeira é responsável por, a partir de um elemento, calcular todas as somas possíveis com os outros e colocá-las em uma lista. Isso ocorre para cada elemento da lista. Sendo assim, se temos /N/ elementos, teremos /N/ sublistas em uma lista. Por conta disso, tivemos de implementar uma função que retornasse o valor máximo dessa lista de listas. E é este o propósito da segunda função mencionada =multi-max=.

* A estratégia do segundo algoritmo

O segundo algoritmo implementado tem uma ordem O(N log(N)). É baseada na ideia de dividir a lista ao meio e calcular a maior soma na primeira metade, na segunda metade e por fim, calcular a maior soma que passe pelo meio onde a lista incial foi dividida. Esse tipo de algoritmo é conhecido como algoritmo de /divisão e conquista/. No artigo original, também foi sugerido fazer o mesmo algoritmo, porém usando /arrays/. A seguir está o algoritmo implementado com listas:


*Algoritmo O(Nlog(N))*
#+BEGIN_SRC scheme
(define (createvector lst)
  (let ((k (length lst)))
    (define (aux lst1 lst2 counter)
      (if (equal? counter 0)
          (list lst1 lst2)
          (aux (append lst1 (list (car lst2))) (cdr lst2) (- counter 1))))
    (if (even? k)
        (aux (list (car lst)) (cdr lst) (- (/ k 2) 1))
        (aux (list (car lst)) (cdr lst) (- (/ (+ k 1) 2) 1)))))
        

(define (MaxBegin lista)
  (let ((p empty))
   (if (null? lista)
       empty
       (for/list ((j (+ (length lista) 1))
                  #:when (> j 0))
         (begin (set! p (X lista 1 j))
                p)))))
                

(define (MaxMiddle lst)
  (+ (multi-max (MaxBegin (reverse (car lst)))) (multi-max (MaxBegin (cadr lst)))))
  

(define (MaxSoFar-2 lst)
  (let ((p (createvector lst)))
   (max (MaxSoFar-1 (car p)) (MaxSoFar-1 (cadr p)) (MaxMiddle p))))
#+END_SRC

Para melhor compreensão, vamos explicar melhor o objetivo da implementação do algoritmo a partir da =MaxSoFar=. A ideia é:

1. Dividir a lista ao meio, criando "vetores" (na verdade, subvetores do vetor original, que foi implementado como uma lista);
2. Calcular a maior soma em cada vetor através de um subvetor que comece pelo primeiro termo. No caso de vetores não-negativos, o subvetor é o próprio vetor.
3. Calcular a maior soma que passe pelo intervalo intermediário onde foi dividida a lista.

Perceba que, para calcular as maiores somas, foram necessárias as funções =createvector= e =MaxMiddle=. A primeira é necessária para criar os dois vetores, enquanto a segunda serve para computar a soma do intervalo intermediário. Sabendo que a =MaxMiddle= recebe uma lista com os dois vetores formados, ela opera com o /car/ e com o /cadr/ desta lista (ou seja, com os vetores)
.
** Por que opera com o /(reverse (car lst))/?

A ideia é simples: =MaxMiddle= opera com /cadr/ normalmente, pois o primeiro elemento do segundo vetor está logo após o intervalo intermediário. Porém, o primeiro elemento do primeiro vetor não está. Por isso, a função precisa do /reverse/, para que consiga computar a soma que está no intervalo intermediário.

* Implementação do terceiro algoritmo



*Algoritmo O(N))*
#+BEGIN_SRC scheme
(define (X-array arr ptr1 ptr2)
  (define (auxX-array arr ptr1 ptr2 counter)
    (if (equal? ptr1 ptr2)
        counter
        (auxX-array arr ptr1 (- ptr2 1) (+ counter (array-ref arr (vector (- ptr2 1)))))))
  (auxX-array arr ptr1 ptr2 (array-ref arr (vector (- ptr1 1)))))

(define (MaxSoFar-3 lst) ; o código recebe uma lista e a transforma em array.
  (let ((p (list->array lst))
        (MaxSoFar 0)
        (MaxEndingHere 0))
    (define (aux arr counter1 counter2 counter3)
      (if (equal? counter3 0)
          (max counter1 counter2)
          (aux arr (max counter1 counter2)
               (max MaxEndingHere
                    (+ counter2 (X-array arr counter3 counter3)))
               (- counter3 1))))
    (aux p MaxSoFar MaxEndingHere (array-size p))))


(require math/array)

#+END_SRC

* Tabelas de Complexidade

| Algoritimo      |     | a           | b         | c      |
|-----------------+-----+-------------+-----------+--------|
| Run Time        |     | 0,00015.N^3 | 7.Nlog(N) | 0,04.N |
| (milissegundos) |     |             |           |        |
|-----------------+-----+-------------+-----------+--------|
| Time to solve   | N^2 | 150 ms      |           | 4 ms   |
| problem of size | N^3 | 150 s       |           | 40 ms  |
|                 | N^4 | 41 hrs      |           | 0,4 s  |
|                 | N^5 | 4,8 yrs     |           | 4 s    |
|                 | N^6 | 4,8 mill    |           | 40 s   |
|-----------------+-----+-------------+-----------+--------|
| Max problem     | s   |             |           |        |
| solved in       | min |             |           |        |
|                 | hr  |             |           |        |
|                 | day |             |           |        |


#+CAPTION: qsdwefwef

#+NAME:    fig:SED-FFVV

[[https://raw.githubusercontent.com/rafaelmesqs/LP-2016.2-EMAp-project/master/GrafComplex.png]]
